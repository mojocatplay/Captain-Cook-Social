package chefhouse{	import flash.display.*;	import flash.events.*	import retrieveInfo.*;	import bejeweled.*;	import restaurant.*;	import util.*;	import user.*;		import com.greensock.*;	import com.greensock.easing.*;		public class QuestShortcutPopUp extends MovieClip	{		private var display;		private var Quests_PopUp:Class = Class(index.utilsAsset.loaderInfo.applicationDomain.getDefinition("Quests_PopUp"));		private var GetMoreQuest_Butt:Class = Class(index.utilsAsset.loaderInfo.applicationDomain.getDefinition("GetMoreQuest_Butt"));				private var questArray:Array = [];		private var recipeArray:Array = [];		private var questSetArray:Array = [];				private var totalNumQuestSets:int = 0;				private var recipeDisplay:MovieClip;		private var questListContainer:Sprite = new Sprite();				private var currentRecipe:int;		private var getMoreQuestButt;				private var questSetDisplayArray = [];		public var myQuest;				private var userLevel;		private var userQuestSetsDone;		private var chefQuestGained;		private var newChefQuestArray:Array = [];		private var questLearning;		private var questDialog;				private var noCurrentQuest:Boolean = false;		private var theRestaurant;				public function QuestShortcutPopUp(theRestaurant:RestaurantScene):void		{			this.theRestaurant = theRestaurant;			currentRecipe = GlobalVarContainer.getUser().getCurrentRecipe();			recipeArray = RecipeInfo.matchRecipeIngre(currentRecipe);			recipeDisplay = RecipeInfo.matchRecipeDisplay(currentRecipe);			userLevel = GlobalVarContainer.getUser().getLevel();			userQuestSetsDone = GlobalVarContainer.getUser().getRecipes();						display = new Quests_PopUp();			this.addChild(display);						putGetMoreQuests();							display.closeButt.addEventListener(MouseEvent.CLICK, closeQuestShortcut, false, 0, true);		}				private function checkAvaiChefQuests(chef:int):Boolean		{			var setsDone:Array = [];			var i:int;			var learningQuestSets = GlobalVarContainer.getUser().getCurrentQuestsSetsID();						for (i = 0; i<learningQuestSets.length; ++i)			{				if (learningQuestSets[i] > 1000)				{					switch(chef)					{						case ChefInfo.CHEF_ROBIN:						if (learningQuestSets[i] < 1100)						{							return false;						}						break;						case ChefInfo.CHEF_KLAUS:						if (learningQuestSets[i] < 1200 && learningQuestSets[i] > 1100)						{							return false;						}						break;						case ChefInfo.CHEF_MARCIEL:						if (learningQuestSets[i] < 1300 && learningQuestSets[i] > 1200)						{							return false;						}						break;					}				}			}						for (i = 0; i<userQuestSetsDone.length; ++i)			{				if (userQuestSetsDone[i].id > 1000)				{					switch(chef)					{						case ChefInfo.CHEF_ROBIN:						if (userQuestSetsDone[i].id < 1100)						{							setsDone.push(userQuestSetsDone[i].id);						}						break;						case ChefInfo.CHEF_KLAUS:						if (userQuestSetsDone[i].id < 1200 && userQuestSetsDone[i].id > 1100)						{							setsDone.push(userQuestSetsDone[i].id);						}						break;						case ChefInfo.CHEF_MARCIEL:						if (userQuestSetsDone[i].id < 1300 && userQuestSetsDone[i].id > 1200)						{							setsDone.push(userQuestSetsDone[i].id);						}						break;					}				}			}						if (setsDone.length > 0)			{				setsDone.sort();				var lastestQuest = setsDone[setsDone.length - 1];								if (userLevel >= QuestInfo.matchChefQuestLevelRequirement(lastestQuest + 1))				{										chefQuestGained = lastestQuest + 1;					if (chefQuestGained == 1013 || chefQuestGained == 1110 || chefQuestGained == 1207)					{						return false;					}					return true;				}				else				{					return false;				}			}			else			{				switch(chef)				{					case ChefInfo.CHEF_ROBIN:					if (userLevel >= QuestInfo.matchChefQuestLevelRequirement(1001))					{						chefQuestGained = 1001;						return true;					}					break;					case ChefInfo.CHEF_KLAUS:					if (userLevel >= QuestInfo.matchChefQuestLevelRequirement(1101))					{						chefQuestGained = 1101;						return true;					}					break;					case ChefInfo.CHEF_MARCIEL:					if (userLevel >= QuestInfo.matchChefQuestLevelRequirement(1201))					{						chefQuestGained = 1201;						return true;					}					break;				}			}						var learningQuestSets = GlobalVarContainer.getUser().getCurrentQuestsSetsID();			for (i = 0; i<learningQuestSets.length; ++i)			{				if (chefQuestGained == learningQuestSets[i])				{					return false;				}			}						return false;		}				private function showChefQuest(evt:MouseEvent):void		{			questDialog = new ChefQuestDialog(QuestInfo.matchQuestChef(evt.currentTarget.quest), evt.currentTarget.quest);			questDialog.x = 380;			questDialog.y = 310;			RestaurantScene(this.parent).addChild(questDialog);			questLearning = evt.currentTarget.quest;			questDialog.addEventListener("next", closeChefQuestDialog);		}				private function closeChefQuestDialog(evt:Event):void		{			evt.currentTarget.removeEventListener("next", closeChefQuestDialog);			var questManagement = new QuestManagement();			questManagement.sendLearnQuest(questLearning);			questManagement.addEventListener("learnedQuest", showUserQuests);		}				private function showUserQuests(evt:Event):void		{			var restaurantScene = RestaurantScene(this.parent);			majorUpdate();			restaurantScene.closeQuestShortcut(null);			restaurantScene.removeChild(questDialog);			restaurantScene.updateNewQuestIndi();			restaurantScene.putNewQuestPopUp(questLearning);		}				private function setUpQuestList():void		{			questSetArray = GlobalVarContainer.getUser().getQuestSets();			totalNumQuestSets = questSetArray.length;			//questButtArray = new Array(questSetArray.length);						questListContainer.x = display.questListMask.x;			questListContainer.y = display.questListMask.y;			//questListContainer.mask = display.questListMask;			display.questListMask.visible = false;						display.addChild(questListContainer);						if (questSetArray.length === 0)			{				noCurrentQuest = true;			}			else			{				getMoreQuestButt.visible = false;				for (var i = 0; i<questSetArray.length; ++i)				{					setUpQuestSet(questSetArray[i].id, i);				}			}						//display.scrollDownButt.addEventListener(MouseEvent.MOUSE_DOWN, moveListUp);			//display.scrollUpButt.addEventListener(MouseEvent.MOUSE_DOWN, moveListDown);		}				private function setUpQuestSet(questSet:int, index:int):void		{			var questSetDisplay = new QuestSetDisplay(questSet, index);			questSetDisplay.x = 10;			questSetDisplay.y = 2 + 60 * index;			questListContainer.addChild(questSetDisplay);			questSetDisplayArray.push(questSetDisplay);		}		private function moveListUp(evt:MouseEvent):void		{			var newY;			if (questListContainer.y > -(questListContainer.height + 60 - display.questListMask.height))			{				if (questListContainer.y - 150 > - (questListContainer.height + 60  - display.questListMask.height))				{					newY = questListContainer.y - 150;				}				else				{					newY = -(questListContainer.height + 60 - display.questListMask.height);				}				TweenMax.to(questListContainer, 0.3, {y:newY, ease:Circ.easeOut});			}		}				private function moveListDown(evt:MouseEvent):void		{			var newY;			if (questListContainer.y < display.questListMask.y)			{				if (questListContainer.y < display.questListMask.y - 150)				{					newY = questListContainer.y + 150;				}				else				{					newY = display.questListMask.y;				}				TweenMax.to(questListContainer, 0.3, {y:newY, ease:Circ.easeOut});			}		}				private function putGetMoreQuests():void		{			getMoreQuestButt = new GetMoreQuest_Butt();			getMoreQuestButt.scaleX = getMoreQuestButt.scaleY = 0.8;						getMoreQuestButt.x = 10;			getMoreQuestButt.y = 2;						getMoreQuestButt.addEventListener(MouseEvent.CLICK, showMap);			this.addChild(getMoreQuestButt);						getMoreQuestButt.visible = false;		}				private function showMap(evt:MouseEvent):void		{			RestaurantScene(this.parent).openMap(null);			RestaurantScene(this.parent).notRemoveOverlay = true;			RestaurantScene(this.parent).closeQuestShortcut(null);		}				public function removeQuestInfo():void		{					}				public function updateProgress(group:int, index:int)		{			questSetDisplayArray[group].updateProgress(index);		}				public function updateQuestPopUpQuest(group:int, questNo:int):void		{			if (questSetDisplayArray[group])			{				questSetDisplayArray[group].updateComplete(questNo);			}		}				public function majorUpdate():void		{						for (var i:int = 0; i<questSetDisplayArray.length; ++i)			{				questListContainer.removeChild(questSetDisplayArray[i]);			}			for (i = 0; i<newChefQuestArray.length; ++i)			{				if (questListContainer.contains(newChefQuestArray[i]))				{					questListContainer.removeChild(newChefQuestArray[i]);				}			}						questSetDisplayArray = [];			newChefQuestArray = [];						setUpQuestList();			var j = 0;			for (i = 1; i<=3; ++i)			{				if (checkAvaiChefQuests(i))				{					var newChefQuest = new NewQuestNotification(chefQuestGained);					newChefQuest.x = 10;					newChefQuest.y = (questSetDisplayArray.length + j) * 60 + 2;					newChefQuest.quest = chefQuestGained;					newChefQuest.addEventListener(MouseEvent.CLICK, showChefQuest);					newChefQuestArray.push(newChefQuest);					questListContainer.addChild(newChefQuest);					j++;				}			}			/*			if (j == 0 && GlobalVarContainer.getUser().getCurrentQuestsSetsID().length === 0)			{				getMoreQuestButt.visible = true;			}*/						theRestaurant.updateNewQuestIndi();		}						private function closeQuestShortcut(evt:MouseEvent):void		{			RestaurantScene(this.parent).closeQuestShortcut(null);		}				public function openMenu(dish:int):void		{			closeQuestShortcut(null);			theRestaurant.openMenuWithDishSelected(dish);		}				public function gotoQuest(evt:MouseEvent = null):void		{			trace("s");			//evt.currentTarget.removeEventListener(MouseEvent.MOUSE_DOWN, gotoQuest);			dispatchEvent(new Event("go quest"));		}	}}